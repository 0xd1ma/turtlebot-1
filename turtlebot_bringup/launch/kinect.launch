<launch>
  <arg name="base" value="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->

  <include file="$(find turtlebot_bringup)/launch/$(arg base)/_kinect_extras.launch"/>

  <!-- Kinect -->
  <node pkg="nodelet" type="nodelet" name="openni_manager" output="screen" respawn="true" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="openni_launch" args="load openni_camera/OpenNINodelet openni_manager" respawn="true">
    <rosparam file="$(find turtlebot_bringup)/param/kinect.yaml" command="load"/>
  </node>
  <!-- 
    Alternative way - load standard constellation of processing nodelets from the openni launcher directly
    This I suspect is too heavy - see http://www.ros.org/wiki/openni_camera 
  -->
  <!-- 
  <include file="$(find openni_launch)/launch/openni.launch" ns="/">
    <arg name="camera" value="camera"/>
    <arg name="publish_tf" default="true"/>
    <arg name="rgb_frame_id" value="$(arg camera)__rgb_optical_frame" />
    <arg name="depth_frame_id" value="$(arg camera)_depth_optical_frame" />
    <arg name="depth_registration" value="true" />
  </include>
   -->

  <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager" respawn="true">
    <param name="max_rate" value="20.0"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node>

  <!-- Fake Laser -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.15"/>
    <param name="max_height" value="0.15"/>
    <remap from="cloud" to="/cloud_throttled"/>
  </node>

  <!-- Fake Laser (narrow one, for localization -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser_narrow" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.025"/>
    <param name="max_height" value="0.025"/>
    <remap from="cloud" to="/cloud_throttled"/>
    <remap from="scan" to="/narrow_scan"/>
  </node>

</launch>

