<launch>
  <arg name="use_openni_launch" default="false"/>

  <arg name="camera"            value="camera"/>
  <arg name="rgb"               default="rgb" />
  <arg name="ir"                default="ir" />
  <arg name="depth"             default="depth" />
  <arg name="depth_registered"  default="depth_registered" />
  <arg name="projector"         default="projector" />
  <arg name="respawn"           default="false" />
  <arg name="manager"           value="$(arg camera)_nodelet_manager" />

  <!-- 
    Lighter method - load minimal set of depth sensing infrastructure
  -->
  <group unless="$(arg use_openni_launch)" ns="$(arg camera)">
    <node pkg="nodelet" type="nodelet" name="$(arg manager)" output="screen" respawn="true" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="openni_camera_loader" args="load openni_camera/driver $(arg camera)_nodelet_manager" respawn="true">
        <rosparam file="$(find turtlebot_bringup)/param/kinect.yaml" command="load"/>
    </node>

    <!-- RGB processing - should we actually put this in here or in the apps? -->
    <include file="$(find image_proc)/launch/image_proc.launch" ns="$(arg rgb)">
      <arg name="manager" value="/$(arg camera)/$(arg manager)" /> <!--  Image proc can't seem to resolve if only $(arg manager) is set -->
      <arg name="respawn" value="$(arg respawn)" />
    </include>

    <!-- Launch depthimage_to_laserscan -->
    <!-- This uses lazy subscribing, so will not activate Asus/Kinect until scan is requested. -->
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan_loader" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg camera)_nodelet_manager">
     <param name="output_frame_id" value="/$(arg camera)_depth_frame"/>
     <param name="range_min" value="0.6"/>
     <remap from="image" to="/$(arg camera)/depth_registered/image_raw"/>
     <remap from="scan" to="/scan" />
   </node>
  </group>

  <!-- 
    Alternative way - load standard constellation of processing nodelets from the openni launcher directly
    This I suspect is too heavy - see http://www.ros.org/wiki/openni_camera
    depth_registration = true is not working - https://github.com/turtlebot/turtlebot/issues/10 
  -->
  <group if="$(arg use_openni_launch)">
    <include file="$(find openni_launch)/launch/openni.launch" ns="/">
      <arg name="camera" value="$(arg camera)"/>
      <arg name="publish_tf" default="false"/>
      <arg name="rgb_frame_id" value="$(arg camera)_rgb_optical_frame" />
      <arg name="depth_frame_id" value="$(arg camera)_depth_optical_frame" />
      <arg name="depth_registration" value="false" />
    </include>
    
	  <!-- throttling -->
	  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle $(arg camera)_nodelet_manager">
	    <param name="max_rate" value="20.0"/>
	    <remap from="cloud_in" to="/camera/depth/points"/>
	    <remap from="cloud_out" to="cloud_throttled"/>
	  </node>
  </group>
</launch>

