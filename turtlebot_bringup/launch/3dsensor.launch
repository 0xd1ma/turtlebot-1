<launch>
  <!-- Kinect -->
  <arg name="camera" default="camera"/>
  <arg name="use_openni_launch" default="false"/>

  <!-- Remapping arguments -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <arg name="manager" value="$(arg camera)_nodelet_manager" />

  <!-- 
    Lighter method - load minimal set of depth sensing infrastructure
  -->
  <group unless="$(arg use_openni_launch)" ns="$(arg camera)">
    <node pkg="nodelet" type="nodelet" name="$(arg camera)_nodelet_manager" output="screen" respawn="true" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="openni_driver" args="load openni_camera/driver $(arg camera)_nodelet_manager" respawn="true">
        <rosparam file="$(find turtlebot_bringup)/param/kinect.yaml" command="load"/>
      </node>
    <arg name="respawn" default="false" />
      <!-- Load standard constellation of processing nodelets -->
<!--       <include file="$(find openni_launch)/launch/includes/processing.launch"> -->
<!--         <arg name="manager"               value="/$(arg manager)" /> Fully resolved -->
<!--         <arg name="rgb"                   value="$(arg rgb)" /> -->
<!--         <arg name="ir"                    value="$(arg ir)" /> -->
<!--         <arg name="depth"                 value="$(arg depth)" /> -->
<!--         <arg name="depth_registered"      value="$(arg depth_registered)" /> -->
<!--         <arg name="projector"             value="$(arg projector)" /> -->
<!--         <arg name="respawn"               value="$(arg respawn)" /> -->
<!--       </include> -->
      <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg camera)_nodelet_manager" respawn="true">
        <param name="output_frame_id" value="/camera_depth_optical_frame"/>
        <!-- heights are in the depth frame of the kinect -->
        <param name="min_height" value="-0.28"/>
        <param name="max_height" value="0.25"/>
        <remap from="image" to="/camera/depth_registered/image_raw"/>
        <remap from="scan" to="/scan"/>
      </node>
  </group>

  <!-- 
    Alternative way - load standard constellation of processing nodelets from the openni launcher directly
    This I suspect is too heavy - see http://www.ros.org/wiki/openni_camera
    depth_registration = true is not working - https://github.com/turtlebot/turtlebot/issues/10 
  -->
  <group if="$(arg use_openni_launch)">
    <include file="$(find openni_launch)/launch/openni.launch" ns="/">
      <arg name="camera" value="$(arg camera)"/>
      <arg name="publish_tf" default="false"/>
      <arg name="rgb_frame_id" value="$(arg camera)_rgb_optical_frame" />
      <arg name="depth_frame_id" value="$(arg camera)_depth_optical_frame" />
      <arg name="depth_registration" value="false" />
    </include>
  </group>

  <!-- throttling -->
<!--   <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle $(arg camera)_nodelet_manager"> -->
<!--     <param name="max_rate" value="20.0"/> -->
<!--     <remap from="cloud_in" to="/camera/depth/points"/> -->
<!--     <remap from="cloud_out" to="cloud_throttled"/> -->
<!--   </node> -->
</launch>

