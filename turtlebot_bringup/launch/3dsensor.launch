<launch>
  <arg name="fake_laser" value="false"/> 

  <!-- Kinect -->
  <arg name="camera" value="camera"/>
  <arg name="use_openni_launch" value="true"/>

  <!-- Remapping arguments -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <arg name="manager" value="$(arg camera)_nodelet_manager" />

  <!-- 
    Lighter method - load minimal set of depth sensing infrastructure
  -->
  <group unless="$(arg use_openni_launch)">
    <node pkg="nodelet" type="nodelet" name="$(arg camera)_nodelet_manager" output="screen" respawn="true" args="manager"/>
    <group ns="$(arg camera)">
      <node pkg="nodelet" type="nodelet" name="openni_launch" args="load openni_camera/driver $(arg camera)_nodelet_manager" respawn="true">
        <rosparam file="$(find turtlebot_bringup)/param/kinect.yaml" command="load"/>
      </node>
    </group>
    <group ns="$(arg camera)">
      <arg name="respawn" default="false" />
      <!-- Load standard constellation of processing nodelets -->
      <include file="$(find openni_launch)/launch/includes/processing.launch">
        <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
        <arg name="rgb"                   value="$(arg rgb)" />
        <arg name="ir"                    value="$(arg ir)" />
        <arg name="depth"                 value="$(arg depth)" />
        <arg name="depth_registered"      value="$(arg depth_registered)" />
        <arg name="projector"             value="$(arg projector)" />
        <arg name="respawn"               value="$(arg respawn)" />
      </include>
    </group>
  </group>

  <!-- 
    Alternative way - load standard constellation of processing nodelets from the openni launcher directly
    This I suspect is too heavy - see http://www.ros.org/wiki/openni_camera
    depth_registration = true is not working - https://github.com/turtlebot/turtlebot/issues/10 
  -->
  <group if="$(arg use_openni_launch)">
    <include file="$(find openni_launch)/launch/openni.launch" ns="/">
      <arg name="camera" value="$(arg camera)"/>
      <arg name="publish_tf" default="false"/>
      <arg name="rgb_frame_id" value="$(arg camera)_rgb_optical_frame" />
      <arg name="depth_frame_id" value="$(arg camera)_depth_optical_frame" />
      <arg name="depth_registration" value="false" />
    </include>
  </group>

  <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle $(arg camera)_nodelet_manager" respawn="true">
    <param name="max_rate" value="20.0"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node>

  <group if="$(arg fake_laser)">
    <include file="$(find turtlebot_bringup)/launch/include/_fake_laser.launch"/>
  </group>

</launch>

